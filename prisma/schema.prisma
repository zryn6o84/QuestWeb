// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  password              String?        // Add password field
  emailVerified        DateTime?
  image                String?
  nickname             String?
  avatar               String?
  evmAddress           String?        @unique
  solanaAddress        String?
  auroAddress          String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  accounts             Account[]
  sessions             Session[]
  createdQuests        Quest[]        @relation("QuestCreator")
  createdTasks         Task[]         @relation("TaskCreator")
  questMemberships     QuestMember[]
  taskReviewers        TaskReviewer[]
  submissions          Submission[]   @relation("UserSubmissions")
  reviewedSubmissions  Submission[]   @relation("ReviewedSubmissions")

  // Social accounts info
  githubId              String?
  githubUsername        String?
  githubName            String?
  discordId             String?
  discordUsername       String?
  discordName           String?
  twitterId             String?
  twitterUsername       String?
  twitterName           String?
  telegramId            String?
  telegramUsername      String?

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quest {
  id          String        @id @default(cuid())
  name        String
  description String
  img         String?
  config      String?       // JSON string
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  closed      Boolean       @default(false)
  creatorId   String
  creator     User          @relation("QuestCreator", fields: [creatorId], references: [id])
  tasks       Task[]
  members     QuestMember[]

  @@index([creatorId])
}

model Task {
  id             String         @id @default(cuid())
  name           String
  description    String
  config         String        // JSON string
  deadline       DateTime
  maxCompletions Int
  rewardAmount   String        // Store as string to handle large numbers
  questId        String
  quest          Quest         @relation(fields: [questId], references: [id], onDelete: Cascade)
  creatorId      String
  creator        User          @relation("TaskCreator", fields: [creatorId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  submissions    Submission[]
  reviewers      TaskReviewer[]

  @@index([questId])
  @@index([creatorId])
}

model QuestMember {
  id        String   @id @default(cuid())
  questId   String
  userId    String
  quest     Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([questId, userId])
  @@index([questId])
  @@index([userId])
}

model TaskReviewer {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
}

model Submission {
  id            String    @id @default(cuid())
  taskId        String
  userId        String
  content       String    // JSON string containing proof
  status        String    @default("pending") // pending, approved, rejected
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviewerId    String?
  reviewComment String?
  reviewedAt    DateTime?
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user          User      @relation("UserSubmissions", fields: [userId], references: [id])
  reviewer      User?     @relation("ReviewedSubmissions", fields: [reviewerId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([reviewerId])
}
